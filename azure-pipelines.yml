variables:
  webservice_name: dependencyindexer

stages:
- stage: terraform
  jobs:
  - job: alignment
    variables:
    - group: dg-tf-vars
    - group: dg-appsvc-vars
    steps:
    - task: AzureCLI@1
      displayName: apply
      inputs:
        azureSubscription: pipeline-dg 
        scriptLocation: inlineScript
        workingDirectory: terraform
        inlineScript: |
          terraform init -input=false -backend-config="resource_group_name=$(sa-rg)" -backend-config="storage_account_name=$(sa)" -backend-config="container_name=$(sa-container)"
          terraform plan -out=tfplan -input=false
          terraform apply tfplan
      env:
        ARM_CLIENT_ID: $(client-id)
        ARM_CLIENT_SECRET: $(client-secret)
        ARM_SUBSCRIPTION_ID: $(subscription-id)
        ARM_TENANT_ID: $(tenant-id)
        ARM_ACCESS_KEY: $(access-key)
        TF_VAR_dependency_graph_url: $(dg_websiteUrl)
        TF_VAR_dependency_graph_code: $(dg_websiteCode)
        TF_VAR_webservice_name: $(webservice_name)
- stage: deploy
  dependsOn: terraform
  jobs:
  - job: Release
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: build
      inputs:
        command: 'build'
        projects: '**/src/*.sln'
    - task: DotNetCoreCLI@2
      displayName: publish
      inputs:
        command: 'publish'
        publishWebProjects: false
        zipAfterPublish: true
        projects: '**/src/**/*.csproj'
        modifyOutputPath: false
    - task: AzureWebApp@1
      displayName: deploy
      inputs:
        azureSubscription: 'pipeline-deploy-dg'
        appType: webAppLinux
        appName: '$(webservice_name)'
        package: '$(System.DefaultWorkingDirectory)/**/*.zip'        